import os
import google.generativeai as genai
from app.config import GEMINI_API_KEY

genai.configure(api_key=GEMINI_API_KEY)

# Configure generation settings
generation_config = {
    "temperature": 0.5,
    "top_p": 1,
    "top_k": 0,
    "max_output_tokens": 500,
    "response_mime_type": "text/plain",
}

# Configure safety settings
safety_settings = [
    {
        "category": "HARM_CATEGORY_HARASSMENT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE",
    },
    {
        "category": "HARM_CATEGORY_HATE_SPEECH",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE",
    },
    {
        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE",
    },
    {
        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE",
    },
]

# Initialize the generative model
model = genai.GenerativeModel(
    model_name="gemini-1.0-pro",
    safety_settings=safety_settings,
    generation_config=generation_config,
)


def analyze_code(code: str) -> str:
    # Start a chat session
    chat_session = model.start_chat(history=[])

    # Send the code for analysis
    response = chat_session.send_message(f"Analyze the following code for vulnerabilities:\n\n{code}")

    return response.text.strip()


def generate_patch(code: str) -> str:
    # Start a chat session
    chat_session = model.start_chat(history=[])

    # Send the code for patch generation
    response = chat_session.send_message(
        f"Provide a patched version for the following code to fix any vulnerabilities:\n\n{code}")

    return response.text.strip()
